페스트캠퍼스 django 실전강의 중 참고 명령어 및 내용 정리

Superuser
username : mj
password : 2121

3-1 view - class-based view란?
    view함수를 따로 만들지 않아도 이미 장고에서 만들어둔 class들이 있으므로 이것을 잘 활용하는 것.

3-2 회원가입 만들기 - formview를 이용해서
    1. forms.py에 회원가입을 위한 폼을 만들기.
    2. template에 사용할 템플릿 만들기.
    3. views.py에 Formview를 상속받는 class를 만들어서 템플릿이름(template_name), 사용하는 폼(form_class), 성공시 이동할 redirect페이지(success_url)을 넣어준다.

3-3 로그인 만들기
    1. forms.py에 로그인 폼 만들기
    2. views.py에 Formview사용, 1.에서 만든 로그인폼을 사용해서 로그인뷰 함수 만들기.
    3. 로그인 html페이지 만들기.
    4. urls.py에 연결
    5. session설정

3-4 상품목록 만들기
    <th>테그의 scope속성 : 시각적 효과는 없지만 시각장애인들을 위한 스크린리더기 같은 장치를 사용할 때 사용되는 속성이다.

    listview는 model만 넘겨주면 리스트로 뷰를 만들어준다.
    listview에서 object_lsit라는 변수명으로 template에서 리스트값들을 불러올 수 있음. 다른 변수명을 사용하고 싶을 땐 context_object_name을 사용해서 원하는 변수명 설정 가능.

    숫자에 1000자리마다 , 표시하기 : 장고의 humanize 앱 사용.
    settings.py에 humanize앱 설정 > html에서 {% load humanize %} > 숫자 뒤에 | incomma로 조건 설정

    등록날짜 형식 변경 : 장고의 humanize 앱 사용.(https://docs.djangoproject.com/en/4.0/ref/templates/builtins/#date)
    위의 공식문서 참고해서 장고 builtin filter사용.

3-5 상품 등록하기 - formview를 이용해서 상품 등록
    1. register_product.html만들어두기.
    2. 상품등록을 위한 폼(Form)만들기.
    3. views.py에 상품등록 함수 만들기.
    4. urls.py에 연결

    항상 오타 있는지 확인!!!

3-6 상품등록하기 - 위즈윗 에디터 summernote이용
    bootstrap5 를 사용하니깐 안되서 bootstrap4를 사용해서 summernote구현했음.
    header에 설정하면 됨. 코드 참고
    
    base.html은 하나만 만들어도 templates 폴더의 템플릿파일들을 장고가 찾아줌.(settings.py > TEMPLATES > APP_DIRS:True)

3-7 상품 상세보기 - product_detail
    settings.py에서 <int:pk>를 사용하면 장고가 product_detail 뷰를 찾아 주어진 매개변수 pk를 찾아 뷰로 전달한다.
    html템플릿에서는 html을 브라우저에 맞게 보여주려면 safe함수를 걸어주면 된다.
    view에서는 DetailView를 상속받아 넘겨주는데 이때 queryset을 받게 된다. 이때 sql filter를 사용할 수도 있으니 참고!

3-8 상품 주문하기 - 1
    상품 주문 폼 만들기 - 수량(quantity), 상품정보(product), 사용자(fcuser)테이블에 넣을 정보를 만들어야 하는데 이 때 사용자(fcuser)는 session에서 받으면 되기 때문에 따로 폼에 반영해주지 않는다.

    View안에 - get_context_data함수를 이용해서 추가하고자 하는 데이터를 추가할 수 있다.

    html코드 짤 때 띄어쓰기 중요하다. 
    
    DetailView에서 Form의 내용을 사용할 땐 get_context_data함수를 이용해서 폼의 내용을 가져올 수 있다.

3-9 상품 주문하기 - 2
    session정보 가져오기.
    form에서 request정보에 접근하기 위해서 __init__함수를 상속받고 그리고 거기에 request인자를 받도록 코드를 짠다. 그리고 나서 request를 실제로 넘겨준다.
    view에 request가 있다. 

3-10 상품 주문하기 - 3
    트렌젝션 : 일련의 여러 동작을 하나의 동작으로 처리하겠다. 즉 전체가 다 성공하면 성공 그러나 하나라도 실패하면 롤백시킴. 일관되게 여러 동작들이 한번에 처리되도록 하는 것. 

    여기서는 상품주문과 상품 주문시 주문량만큼 재고 감소시키는 동작이 동시에 일어나도록 해야하는 것. 이떄 with transaction.atomic()를 사용해서 한꺼번에 처리한다.

3-11 주문정보 조회
    주문정보를 조회하려고 할 때는 리스트뷰(listview)를 이용하면 된다.
    html, view를 만들어주고 settings.py에서 url연결 잊지말기. 
    view만들 떄 주의할 부분
    Order의 Model을 이용하여 리스트뷰를 만들어버리면 모든 사용자의 주문정보가 조회된다. 이를 해결하려면 queryset을 이용하여 filter를 걸어주면 된다.
    model을 가져오지 않고 get_queryset함수를 오버라이딩 하여 사용하는 이유는접 속한 사용자의 주문정보만 가져오기 위함. 이렇게 안하면 모든 사용자의 주문정보가 조회됨. 
    ForeignKey를 filter를 걸어줄 땐 아래처럼 __를 주고 원래 모델에서 조회하고자 하는 테이블명을 넣어주면 된다. 아무런 테이블명을 넣어주지 않으면 default로 id값을 조회한다.

4-1 Decorator란?
    함수를 wrapping, 
    기능의 재사용 -> 코드의 재사용성 높임.
    함수를 인자로 받는다.

    클래스 안에 dispatch라는 함수는 request,*args, **kwargs를 인자로 받는데 데코레이터 wrapping을 할 때에도 이 인자들을 받아주어야 한다.

5-1 리팩토링
    모델의 유효성 검사와 저장하는 부분을 분리하는 것.
    view에 form_valid함수에 저장하는 부분을 넣어주고
    form의 clean함수에서 폼의 유효성검사만 맡을 수 있도록 코드를 분리

6-1 DRF
    DRF - django restful framework로 restful API 서버를 만들기 위한 라이브러리이다.
    pip install djangorestframework로 설치
    settings.py에 rest_framework로 앱 등록

    API개발이 참 쉬워진다.!!!

    상세보기를 위한 백엔드 개발은 mixins.RetrieveModelMixin을 사용하고 get함수 return값으로 self.retrieve를 넘겨주면 된다.
    이때 queryset도 가져와야 하는데 이유는 가져온 쿼리셋의 pk값을 id와값과 비교하여 retrieve하기 때문이다.