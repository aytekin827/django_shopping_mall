3. django admin 사용자 생성 및 권한.
	django admin페이지에서 backoffice용 아이디를 생성하고 권한 설정이 가능하다.
    단, 주의할 점은 superuser는 backoffice용 아이디도 관리할 수 있는 가장 강력한 권한을 가진 계정이므로 하나만 생성

4,5 list_display에 필터 걸기.
	admin.py에서 list_filter해주고 튜플에 컬럼 명 넣기.

	choices는 콤보박스 만들어줄 때 사용하면 됨.

	admin페이지에서 html적용하기
	from django.utils.html import format_html # html escape를 없애준다.
	format_html을 사용하여 html escape를 제거해주며
	list_display = ('test',)
	def test(self,obj):
		return format_html(...)
		이런식으로 html과 css도 넣어가며 커스터마이징을 해줄 수 있다.

	이 때 test.short_description 속성을 설정해서 컬럼 제목을 설정해줄 수 있다. 

6. 커스텀필드 포멧팅 - view에서 humanize 사용하기.
	from django.contrib.humanize.templatetags.humanize import intcomma 이렇게 import 해주고. import 경로 확인.
	함수로써 사용해주면 된다.
	import 경로가 어떻게 다큐멘테이션에서 찾을 수 있는지가 ...
	https://stackoverflow.com/questions/37970001/how-to-use-django-contrib-humanize-in-a-model

7. 오픈소스를 활용한 어드민 스타일링
	baton이라는 오픈소스를 활용해서 테마 적용
	설치 : pip install django-baton
	https://github.com/otto-torino/django-baton 참고

8. django app 이름 커스터마이징.
	프로젝트 settings.py에서 installed_apps 리스트에 앱.apps.[config클래스] 이런식으로 설정.
	각 앱의 apps.py에서 config 클래스에 verbose_name을 설정해서 UI에 나타날 앱을 커스터마이징 할 수 있다.

	참고. 각 앱에 들어있는 모델의 이름을 커스터마이징 할 땐 models.py에서 모델 클래스 안에 Meta클래스에서 verbose_name을 설정해줘서 커스터마이징 한다.

9. django 목록페이지 제목 커스터마이징.
	각 앱의 admin.py페이지 안에 changelist_view함수를 상속, 오버라이딩 해서 사용
	extra_context에 딕셔너리 형태로 { 'title' : '원하는 목록 명'} 이런식으로 지정해줘서 커스터마이징

10. django 수정페이지 제목 커스터마이징과 인터페이스 언어 변경
	각 앱의 admin.py페이지 안에 changeform_view함수를 상속, 오버라이딩 해서 사용
	object_id 를 가져와서 그 해당 아이디의 정보들을 extra_context에 넘겨줘서 커스터마이징 할 수 있다.

	언어를 바꾸고싶을 땐 settings.py에서 LANGUAGE_CODE를 변경해주면 된다. ko-kr로 

11. 커스텀 액션 추가하기
	Admin 클래스에서 actions 리스트 안에 함수를 추가해줌.
	환불 기능을 만들 떄 modeladmin, request, queryset을 인자로 받게되고 이때 queryset에는 어드민페이지에서 선택한 모델값들이 넘어오게 된다.

12. 커스텀 액션 추가하기
	transaction.atomic()은 여러가지 db처리를 할 때 사용하는 메서드라고 말하는데 이 기능의 정확한 개념을 모르겠음.

	LogEntry는 장고 어드민이 가지고있는 기능 중에서 log를 관리함
	'최근 활동'에 커스텀 액션 추가한 활동들도 기록이 되고 추가될 수 있도록 하는 것.
	LogEntry.objects.log_action

13. 리스트에 커스텀 버튼 추가하기